name: Sync Upstream and Apply Modifications

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点（UTC时间）自动执行
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-upstream.yml'

jobs:
  sync-and-modify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up upstream remote
      run: |
        git remote add upstream https://github.com/ysuolmai/OpenWRT-CI.git || true
        git remote -v

    - name: Fetch upstream changes
      run: |
        echo "Fetching from upstream..."
        git fetch upstream
        
    - name: Check for upstream updates
      id: check_updates
      run: |
        # 获取本地和上游的最新提交
        LOCAL=$(git rev-parse HEAD)
        UPSTREAM=$(git rev-parse upstream/main)
        
        echo "Local commit: $LOCAL"
        echo "Upstream commit: $UPSTREAM"
        
        if [ "$LOCAL" != "$UPSTREAM" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "发现上游更新！"
          
          # 显示上游的新提交
          echo ""
          echo "================================"
          echo "上游新提交："
          echo "================================"
          git log HEAD..upstream/main --oneline --max-count=10
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "没有上游更新"
        fi

    - name: Merge upstream changes
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "合并上游更改..."
        
        # 配置 git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 尝试合并
        if git merge upstream/main --no-edit; then
          echo "✓ 成功合并上游更改"
        else
          echo "✗ 合并冲突，尝试使用 rebase"
          git merge --abort
          
          # 尝试 rebase
          if git rebase upstream/main; then
            echo "✓ 成功 rebase 上游更改"
          else
            echo "✗ Rebase 失败，使用强制策略"
            git rebase --abort
            
            # 使用 theirs 策略处理冲突
            git merge upstream/main -X theirs --no-edit
            echo "⚠ 使用上游版本解决冲突"
          fi
        fi

    - name: Disable specific workflows
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "================================"
        echo "禁用指定的工作流"
        echo "================================"
        
        # 查找并禁用 Sync Config Files 工作流
        if [ -f ".github/workflows/sync-config.yml" ]; then
          echo "找到 sync-config.yml，重命名为 .sync-config.yml.disabled"
          mv .github/workflows/sync-config.yml .github/workflows/.sync-config.yml.disabled
        fi
        
        # 查找其他可能的文件名
        for file in .github/workflows/*sync*config*.yml .github/workflows/*Sync*Config*.yml; do
          if [ -f "$file" ] && [[ "$file" != *".disabled"* ]]; then
            echo "找到 $(basename $file)，禁用中..."
            mv "$file" "${file}.disabled"
          fi
        done
        
        # 查找并禁用 OWRT-ALL 工作流
        if [ -f ".github/workflows/OWRT-ALL.yml" ]; then
          echo "找到 OWRT-ALL.yml，重命名为 .OWRT-ALL.yml.disabled"
          mv .github/workflows/OWRT-ALL.yml .github/workflows/.OWRT-ALL.yml.disabled
        fi
        
        # 查找其他可能的文件名（大小写变体）
        for file in .github/workflows/*owrt*all*.yml .github/workflows/*OWRT*ALL*.yml; do
          if [ -f "$file" ] && [[ "$file" != *".disabled"* ]]; then
            echo "找到 $(basename $file)，禁用中..."
            mv "$file" "${file}.disabled"
          fi
        done
        
        # 列出所有工作流文件
        echo ""
        echo "当前工作流文件："
        ls -la .github/workflows/
        
        echo ""
        echo "✓ 已禁用指定的工作流"

    - name: Apply 4 modifications to Scripts/diy.sh
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        cat > modify.py << 'ENDPY'
        import re
        
        with open('Scripts/diy.sh', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 第一处修改：替换 keywords_to_delete 数组中的最后一行
        content = re.sub(
            r'("smartdns" "kucat" "bootstrap")\n\)',
            r'\1 "zn_m2" "redmi_ax5" "qihoo_360v6" "redmi_ax5-jdcloud" "link_nn6000-v2" "link_nn6000-v1" "cmiot_ax18" "anysafe_e1"\n)',
            content
        )
        print("修改1完成：更新 keywords_to_delete 数组")
        
        # 第二处修改：在 cifsmount=y 后添加新配置
        additions = '\t"CONFIG_PACKAGE_git-http=y"\n\t"CONFIG_PACKAGE_curl=y"\n\t"CONFIG_PACKAGE_openssl-util=y"\n\t"CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y"\n\t"CONFIG_PACKAGE_kmod-usb-net-rndis=y"'
        
        content = re.sub(
            r'(    "CONFIG_PACKAGE_cifsmount=y")\n(\))',
            r'\1\n' + additions + r'\n\2',
            content
        )
        print("修改2完成：添加额外配置项")
        
        # 第三处修改：在文件末尾添加 PPP/UPnP 修复
        fix_section = """
        #######################################
        # Fix PPP / UPnP issues
        #######################################
        mkdir -p package/base-files/files/etc/uci-defaults
        cat << 'EOF' > package/base-files/files/etc/uci-defaults/99-custom-fixes
        #!/bin/sh
        # 修复拨号问题
        sed -i '8c maxfail 1' /etc/ppp/options
        sed -i '192c sleep 30' /lib/netifd/proto/ppp.sh
        
        # 修复 upnp 问题
        sed -i '10c option external_ip "59.111.160.244"' /etc/config/upnpd
        
        exit 0
        EOF
        chmod +x package/base-files/files/etc/uci-defaults/99-custom-fixes"""
        
        if "Fix PPP / UPnP issues" not in content:
            content = content.rstrip() + '\n' + fix_section + '\n'
            print("修改3完成：添加 PPP/UPnP 修复脚本")
        else:
            print("修改3已存在，跳过")
        
        # 第四处修改：将 dockerman 从 m 改为 y
        content = content.replace(
            '"CONFIG_PACKAGE_luci-app-dockerman=m"',
            '"CONFIG_PACKAGE_luci-app-dockerman=y"'
        )
        content = content.replace(
            '"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m"',
            '"CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y"'
        )
        print("修改4完成：dockerman 改为内置(y)")
        
        with open('Scripts/diy.sh', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("\n所有修改完成！")
        ENDPY
        
        python3 modify.py
        rm -f modify.py

    - name: Verify modifications
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "================================"
        echo "验证修改结果"
        echo "================================"
        echo ""
        
        # 检查第一处修改
        if grep -q '"zn_m2" "redmi_ax5" "qihoo_360v6"' Scripts/diy.sh; then
          echo "✓ 第一处修改验证通过：设备列表已更新"
        else
          echo "✗ 第一处修改验证失败"
        fi
        
        # 检查第二处修改
        if grep -q 'CONFIG_PACKAGE_git-http=y' Scripts/diy.sh && \
           grep -q 'CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y' Scripts/diy.sh; then
          echo "✓ 第二处修改验证通过：配置项已添加"
        else
          echo "✗ 第二处修改验证失败"
        fi
        
        # 检查第三处修改
        if grep -q 'Fix PPP / UPnP issues' Scripts/diy.sh; then
          echo "✓ 第三处修改验证通过：PPP/UPnP 修复已添加"
        else
          echo "✗ 第三处修改验证失败"
        fi
        
        # 检查第四处修改
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' Scripts/diy.sh && \
           grep -q 'CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y' Scripts/diy.sh; then
          echo "✓ 第四处修改验证通过：dockerman 已改为内置"
        else
          echo "✗ 第四处修改验证失败"
        fi

    - name: Commit and push changes
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 添加所有更改（包括禁用的工作流文件）
        git add -A
        
        # 检查是否有更改
        if git diff --cached --quiet; then
          echo "没有需要提交的更改"
          exit 0
        fi
        
        git commit -m "Sync from upstream and apply modifications

        Synced from: https://github.com/ysuolmai/OpenWRT-CI
        
        Applied modifications:
        1. Added 8 devices to keywords_to_delete array
        2. Added git-http, curl, openssl-util, USB network drivers
        3. Added PPP/UPnP fix script
        4. Changed dockerman from module (m) to built-in (y)
        
        Disabled workflows:
        - Sync Config Files
        - OWRT-ALL
        
        Automated by GitHub Actions"
        
        git push origin main

    - name: Summary
      if: always()
      run: |
        echo ""
        echo "================================"
        echo "Sync and Modification Summary"
        echo "================================"
        echo ""
        
        if [ "${{ steps.check_updates.outputs.has_updates }}" == "true" ]; then
          echo "✅ 上游有更新"
          echo "✅ 已同步上游更改"
          echo "✅ 已应用 4 处自定义修改"
          echo "✅ 已禁用 2 个工作流 (Sync Config Files, OWRT-ALL)"
          echo "✅ 已推送到远程仓库"
        else
          echo "ℹ️  上游没有更新，无需同步"
        fi
        
        echo ""
        echo "上游仓库: https://github.com/ysuolmai/OpenWRT-CI"
        echo "同步频率: 每天凌晨 2:00 (UTC)"
        echo ""
        echo "================================"

    - name: Create sync report
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        cat > sync_report.md << 'EOFREPORT'
        # 同步报告
        
        ## 📅 同步时间
        $(date '+%Y-%m-%d %H:%M:%S %Z')
        
        ## 🔄 同步状态
        ✅ 成功同步上游更新
        
        ## 📝 应用的修改
        1. ✅ 添加设备到删除列表 (8个设备)
        2. ✅ 添加软件包配置 (5个包)
        3. ✅ 添加 PPP/UPnP 修复脚本
        4. ✅ dockerman 改为内置编译
        
        ## 🚫 禁用的工作流
        - ✅ Sync Config Files
        - ✅ OWRT-ALL
        
        ## 🔗 上游仓库
        https://github.com/ysuolmai/OpenWRT-CI
        
        ## 📊 新提交
        ```
        $(git log HEAD~5..HEAD --oneline)
        ```
        EOFREPORT
        
        cat sync_report.md
        echo ""
        echo "同步报告已生成！"
